# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
# https://doug.sh/posts/using-composite-actions-with-github-actions/
# https://wallis.dev/blog/composite-github-actions

name: "App Version"
description: "Update App Version"

# Input parameters allow you to specify data that the action expects to use during runtime. GitHub stores input parameters as environment variables.(so they are just string)
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs
inputs:
  # https://stackoverflow.com/questions/70098241/using-secrets-in-composite-actions-github
  token:
    description: A Github PAT
    required: true
  service-name:
    description: Service name
    required: true
  environment:
    description: Environment
    required: true

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputsoutput_idvalue
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
# https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
# we can't use env here because here env evaluate before executing steps and env only accessible in subsequent actions so we should use step output
outputs:
  application-version:
    value: ${{ steps.app-version-step.outputs.app-version }}
    description: "Application Version"

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: "composite"
  steps:
  - name: Setup Node.js
    uses: actions/setup-node@v4
    with:
      node-version: 'lts/*'

  # https://github.com/semantic-release/semantic-release/discussions/2674
  # https://medium.com/@michael.wolfenden/simplified-versioning-and-publishing-for-net-libraries-a28e5e740fa6
  # https://github.com/semantic-release/semantic-release/issues/753
  # https://github.com/semantic-release/semantic-release/issues/1647
  # https://semantic-release.gitbook.io/semantic-release/usage/plugins
  # https://semantic-release.gitbook.io/semantic-release/usage/configuration#dryrun
  # https://github.com/semantic-release/semantic-release/issues/2704
  # https://github.com/semantic-release/semantic-release/issues/2703
  - name: Semantic Release Version
    id: semantic-version
    if: ${{ success() }}
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.token }}
      GIT_AUTHOR_NAME: github-actions[bot]
      GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
      GIT_COMMITTER_NAME: github-actions[bot]
      GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
    # because of using none default (conventionalcommits) `preset` for `semantic-release`, we should add dependency `conventional-changelog-conventionalcommits`
    # using dry-run here for preventing publish release note and just calculate version
    run: |
      echo "running semantic-release in dry-run mode"
      npx  -p conventional-changelog-conventionalcommits -p @semantic-release/git -p  @semantic-release/changelog -p @semantic-release/exec  semantic-release  --dry-run

  # https://stackoverflow.com/questions/69043259/how-can-i-cancel-a-github-actions-workflow-if-the-commit-has-no-tag
  - name: Semantic Release Versions Outputs
    shell: bash
    if: success()
    run: |
      echo ${{ steps.semantic-version.outputs.semantic_nextRelease_version }}
      echo ${{ steps.semantic-version.outputs.semantic_nextRelease_channel }}
      echo ${{ steps.semantic-version.outputs.semantic_nextRelease_gitTag }}
      echo ${{ steps.semantic-version.outputs.semantic_lastRelease_version }}
      echo ${{ steps.semantic-version.outputs.semantic_lastRelease_channel }}
      echo ${{ steps.semantic-version.outputs.semantic_lastRelease_gitTag }}

  - name: Set Application Version
    id: app-version-step
    shell: bash
    if: success()
    # https://gist.github.com/rponte/fdc0724dd984088606b0
    # https://linuxhint.com/bash_if_else_examples/
    # https://github.com/semantic-release/semantic-release/issues/2703
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
    # environment variable available to any 'subsequent steps' (not in the current step that is set) in a workflow job by defining or updating the environment variable and writing this to the GITHUB_ENV environment file
    run: |
      # Get base version from semantic-release
      BASE_VERSION="${{ steps.semantic-version.outputs.semantic_nextRelease_version }}"

      # If no version from semantic-release, use default
      if [ -z "$BASE_VERSION" ]; then
        BASE_VERSION="1.0.0"
      fi

      # Initialize suffix variable
      VERSION_SUFFIX=""

      # Add environment-based suffix if not production
      if [ "${{ inputs.environment }}" == "develop" ]; then
        VERSION_SUFFIX="-dev"
      elif [ "${{ inputs.environment }}" == "staging" ]; then
        VERSION_SUFFIX="-staging"
      fi

      # Combine version components
      FULL_VERSION="${BASE_VERSION}${VERSION_SUFFIX}"

      echo "Final version: $FULL_VERSION"
      echo "APP_VERSION=$FULL_VERSION" >> "$GITHUB_ENV"
      echo "app-version=$FULL_VERSION" >> "$GITHUB_OUTPUT"

  # Save version in the artifacts to use in CD process
  - name: Save Version Name
    if: success()
    shell: bash
    run: echo "${{ env.version }}" > version_name.txt

  - name: Upload Version Artifact
    if: success()
    uses: actions/upload-artifact@v4
    with:
      name: ${{ inputs.service-name}}_version_artifacts
      path: version_name.txt
