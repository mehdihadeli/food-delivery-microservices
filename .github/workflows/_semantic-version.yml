name: Calculate Semantic Version

on:
  workflow_call:
    inputs:
      environment:
        description: "Deployment environment (development/staging/production)"
        required: true
        type: string
        default: "development"
    outputs:
      next-version:
        description: "The next semantic version (without v prefix)"
        value: ${{ jobs.version-calculation.outputs.next-version }}
      version-with-suffix:
        description: "Version with environment suffix"
        value: ${{ jobs.version-calculation.outputs.version-with-suffix }}
    secrets:
      ci_github_token:
        required: true

jobs:
  version-calculation:
    runs-on: ubuntu-latest
    outputs:
      next-version: ${{ steps.extract-version.outputs.next-version }}
      version-with-suffix: ${{ steps.version-suffix.outputs.full-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for full git history analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Determine version suffix
        id: version-suffix
        run: |
          case "${{ inputs.environment }}" in
            "production") suffix="" ;;
            "staging") suffix="-staging" ;;
            *) suffix="-dev" ;;
          esac
          echo "suffix=$suffix" >> $GITHUB_OUTPUT

      - name: Run semantic-release (dry run)
        id: semantic-release
        # because of using none default (conventionalcommits) `preset` for `semantic-release`, we should add dependency `conventional-changelog-conventionalcommits`
        # using dry-run here for preventing publish release note and just calculate version
        run: |
          npx -p conventional-changelog-conventionalcommits \
              -p @semantic-release/git \
              -p @semantic-release/changelog \
              -p @semantic-release/exec \
              semantic-release --dry-run \
              --branches main \
              --debug
          VERSION=$(grep "next release version" $GITHUB_STEP_SUMMARY | awk '{print $NF}')
          echo "next-version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "full-version=${VERSION#v}${{ steps.version-suffix.outputs.suffix }}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.ci_github_token }}

      - name: Extract version
        id: extract-version
        if: always()
        run: |
          echo "next-version=$(echo '${{ steps.semantic-release.outputs.next-version }}' | sed 's/^v//')" >> $GITHUB_OUTPUT
          echo "version-with-suffix=${{ steps.semantic-release.outputs.next-version }}${{ steps.version-suffix.outputs.suffix }}" >> $GITHUB_OUTPUT
