name: Calculate Semantic Version

on:
  workflow_call:
    inputs:
      environment:
        description: "Deployment environment (development/staging/production)"
        required: true
        type: string
      dotnet-version:
        description: .Net Version
        required: true
        type: string
    outputs:
      sem-ver:
        description: "Full semantic version"
        value: ${{ jobs.version.outputs.sem-ver }}
      major-minor-patch:
        description: "Major.Minor.Patch version"
        value: ${{ jobs.version.outputs.major-minor-patch }}
      assembly-sem-ver:
        description: "Assembly semantic version"
        value: ${{ jobs.version.outputs.assembly-sem-ver }}
      informational-version:
        description: "Informational version"
        value: ${{ jobs.version.outputs.informational-version }}
      short-sha:
        description: "Short Git SHA"
        value: ${{ jobs.version.outputs.short-sha }}
      branch-name:
        description: "Git branch name"
        value: ${{ jobs.version.outputs.branch-name }}
      image-version:
        description: "Docker image version with suffix"
        value: ${{ jobs.version.outputs.image-version }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      sem-ver: ${{ steps.extract-version.outputs.sem-ver }}
      major-minor-patch: ${{ steps.extract-version.outputs.major-minor-patch }}
      assembly-sem-ver: ${{ steps.extract-version.outputs.assembly-sem-ver }}
      informational-version: ${{ steps.extract-version.outputs.informational-version }}
      short-sha: ${{ steps.extract-version.outputs.short-sha }}
      branch-name: ${{ steps.extract-version.outputs.branch-name }}
      image-version: ${{ steps.extract-version.outputs.image-version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for Git history analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Install GitVersion
        run: dotnet tool restore

      - name: Determine Image Version Suffix
        id: version-suffix
        run: |
          case "${{ inputs.environment }}" in
            "production") suffix="" ;;
            "staging") suffix="-staging" ;;
            *) suffix="-dev" ;;
          esac
          echo "suffix=$suffix" >> "$GITHUB_OUTPUT"

      - name: Run GitVersion and Extract Versions
        id: extract-version
        run: |
          VERSION_JSON=$(dotnet-gitversion)

          # Extract values from JSON output
          SEM_VER=$(echo "$VERSION_JSON" | jq -r '.SemVer')
          MAJOR_MINOR_PATCH=$(echo "$VERSION_JSON" | jq -r '.MajorMinorPatch')
          ASSEMBLY_SEM_VER=$(echo "$VERSION_JSON" | jq -r '.AssemblySemVer')
          INFO_VERSION=$(echo "$VERSION_JSON" | jq -r '.InformationalVersion')
          SHORT_SHA=$(echo "$VERSION_JSON" | jq -r '.ShortSha')
          BRANCH_NAME=$(echo "$VERSION_JSON" | jq -r '.BranchName')

          # Concatenate image version with suffix
          IMAGE_VERSION="${SEM_VER}${{ steps.version-suffix.outputs.suffix }}"

          # Output values for use in other workflows
          echo "sem-ver=$SEM_VER" >> "$GITHUB_OUTPUT"
          echo "major-minor-patch=$MAJOR_MINOR_PATCH" >> "$GITHUB_OUTPUT"
          echo "assembly-sem-ver=$ASSEMBLY_SEM_VER" >> "$GITHUB_OUTPUT"
          echo "informational-version=$INFO_VERSION" >> "$GITHUB_OUTPUT"
          echo "short-sha=$SHORT_SHA" >> "$GITHUB_OUTPUT"
          echo "branch-name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
          echo "image-version=$IMAGE_VERSION" >> "$GITHUB_OUTPUT"
