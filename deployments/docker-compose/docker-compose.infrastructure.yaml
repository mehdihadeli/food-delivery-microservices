# ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/examples/demo/docker-compose.yaml
# ref: https://github.com/joaofbantunes/DotNetMicroservicesObservabilitySample/blob/main/docker-compose.yml
# ref: https://github.com/oskardudycz/EventSourcing.NetCore/blob/main/docker-compose.yml
# https://github.com/grafana/intro-to-mltp

name: food-delivery-microservices-infrastructure

services:
  #######################################################
  #  rabbitmq
  #######################################################
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - ${RABBITMQ_HOST_PORT:-5672}:${RABBITMQ_PORT:-5672}
      - ${RABBITMQ_HOST_API_PORT:-15672}:${RABBITMQ_API_PORT:-15672}
      # volumes:
      #   - rabbitmq:/var/lib/rabbitmq
    networks:
      - infrastructure

  #######################################################
  #  postgres
  #######################################################
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    ports:
      - ${POSTGRES_HOST_PORT:-5432}:${POSTGRES_PORT:-5432}
    #https://docs.docker.com/compose/environment-variables/env-file/#parameter-expansion
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./../configs/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    networks:
      - infrastructure
  #######################################################
  #  mongo
  #######################################################
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    # https://docs.docker.com/compose/environment-variables/env-file/#parameter-expansion
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS:-admin}
    ports:
      - ${MONGO_HOST_PORT:-27017}:${MONGO_PORT:-27017}
    networks:
      - infrastructure
  # #######################################################
  # #  eventstore-db
  # #######################################################
  # # https://developers.eventstore.com/server/v21.10/installation.html#insecure-single-node
  # # https://hub.docker.com/r/eventstore/eventstore/tags
  # # https://stackoverflow.com/questions/65272764/ports-are-not-available-listen-tcp-0-0-0-0-50070-bind-an-attempt-was-made-to
  # # EVENTSTORE_MEM_DB=true, it tells the EventStoreDB container to use an in-memory database, which means that any data stored in EventStoreDB will not be persisted between container restarts. Once the container is stopped or restarted, all data will be lost.
  # eventstore:
    # image: eventstore/eventstore:latest
    # container_name: eventstore
    # restart: on-failure
    # environment:
      # - EVENTSTORE_CLUSTER_SIZE=1
      # - EVENTSTORE_RUN_PROJECTIONS=All
      # - EVENTSTORE_START_STANDARD_PROJECTIONS=false
      # - EVENTSTORE_EXT_TCP_PORT=1113
      # - EVENTSTORE_HTTP_PORT=2113
      # - EVENTSTORE_INSECURE=true
      # - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      # - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
      # - EVENTSTORE_MEM_DB=true
    # ports:
      # - "1113:1113"
      # - ${EVENTSTORE_HOST_PORT:-2113}:${EVENTSTORE_PORT:-2113}
    # volumes:
      # - type: volume
        # source: eventstore-volume-data
        # target: /var/lib/eventstore
      # - type: volume
        # source: eventstore-volume-logs
        # target: /var/log/eventstore
    # networks:
      # - infrastructure
  # #######################################################
  # #  aspire dashboard
  # #######################################################
  # # https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/dashboard/standalone
  # # https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/dashboard/overview
  # # https://devblogs.microsoft.com/dotnet/dotnet-aspire-general-availability/
  # # https://anthonysimmon.com/dotnet-aspire-dashboard-best-tool-visualize-opentelemetry-local-dev/
  # # https://learn.microsoft.com/en-us/samples/dotnet/aspire-samples/aspire-standalone-dashboard/
  # aspire-dashboard:
  #   image: mcr.microsoft.com/dotnet/aspire-dashboard:latest
  #   container_name: aspire-dashboard
  #   environment:
  #     # for disable login in development mode
  #     - DOTNET_DASHBOARD_UNSECURED_ALLOW_ANONYMOUS=true
  #   ports:
  #     - ${ASPIRE_DASHBOARD_PORT:-18888}:18888  # Dashboard UI port
  #     - ${ASPIRE_OTEL_EXPORTER_PORT:-4319}:18889   # OTLP exporter port , 4317,4318 already reserved by otel-collector
  #   restart: unless-stopped
  #   networks:
  #     - infrastructure
  # #######################################################
  # #  jaeger
  # # https://www.jaegertracing.io/docs/1.64/deployment/
  # # https://www.jaegertracing.io/docs/1.6/deployment/
  # #######################################################
  # jaeger-all-in-one:
  #   image: jaegertracing/all-in-one:latest
  #   container_name: jaeger-all-in-one
  #   restart: unless-stopped
  #   ports:
  #     - "6831:6831/udp" # UDP port for Jaeger agent
  #     - "16686:16686" # endpoints and Jaeger UI
  #     - "14268:14268" # HTTP port for accept trace spans directly from clients
  #     - "14317:4317" # OTLP gRPC receiver for jaeger
  #     - "14318:4318" # OTLP http receiver for jaeger
  #     # - "9411" # Accepts Zipkin spans - /api/v2/spans
  #   networks:
  #     - infrastructure

  # #######################################################
  # #  zipkin
  # # https://zipkin.io/pages/quickstart
  # #######################################################
  # zipkin-all-in-one:
  #   image: openzipkin/zipkin:latest
  #   container_name: zipkin-all-in-one
  #   restart: unless-stopped
  #   ports:
  #     - "9411:9411"
  #   networks:
  #     - infrastructure
  # #######################################################
  # #  otel-collector
  # # https://opentelemetry.io/docs/collector/installation/
  # # https://github.com/open-telemetry/opentelemetry-collector
  # # https://github.com/open-telemetry/opentelemetry-collector-contrib
  # # we can use none contrib docker `otel/opentelemetry-collector` version from `https://github.com/open-telemetry/opentelemetry-collector` repository but,
  # # if we need more components like `elasticsearch` we should use `otel/opentelemetry-collector-contrib` image of `https://github.com/open-telemetry/opentelemetry-collector-contrib` repository.
  # #######################################################
  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib:latest
  #   container_name: otel-collector
  #   restart: unless-stopped
  #   command: [ "--config=/etc/otelcol-contrib/config.yaml" ]
  #   volumes:
  #     - ./../configs/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
  #   ports:
  #     - "11888:1888" # pprof extension
  #     - "8888:8888" # Prometheus metrics exposed by the Collector
  #     - "8889:8889" # Prometheus exporter metrics
  #     - "13133:13133" # health_check extension
  #     - "4317:4317" # OTLP gRPC receiver
  #     - "4318:4318" # OTLP http receiver
  #     - "55679:55679" # zpages extension
  #   depends_on:
  #     - jaeger-all-in-one
  #     - zipkin-all-in-one
  #   networks:
  #     - infrastructure
  # #######################################################
  # #  prometheus
  # # https://prometheus.io/docs/introduction/first_steps/
  # # https://prometheus.io/docs/prometheus/3.1/installation/
  # # https://grafana.com/docs/grafana-cloud/send-data/metrics/metrics-prometheus/prometheus-config-examples/docker-compose-linux/
  # #######################################################
  # prometheus:
  #   image: prom/prometheus:latest
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./../configs/prometheus.yaml:/etc/prometheus/prometheus.yml
  #   # to passe one flag, such as "--log.level=debug" or "--web.enable-remote-write-receiver", we need to override the whole command, as we can't just pass one extra argument
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--storage.tsdb.path=/prometheus"
  #     - "--web.console.libraries=/usr/share/prometheus/console_libraries"
  #     - "--web.console.templates=/usr/share/prometheus/consoles"
  #     # need this for the OpenTelemetry collector to be able to put metrics into Prometheus
  #     - "--web.enable-remote-write-receiver"
  #   #   - "--log.level=debug"
  #   networks:
  #     - infrastructure
  # #######################################################
  # # node-exporter
  # # https://prometheus.io/docs/guides/node-exporter/
  # # https://grafana.com/docs/grafana-cloud/send-data/metrics/metrics-prometheus/prometheus-config-examples/docker-compose-linux/
  # #######################################################
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #   ports:
  #     - "9101:9100"
  #   networks:
  #     - infrastructure
  # #######################################################
  # #  grafana
  # # https://grafana.com/docs/grafana/latest/administration/provisioning/
  # # https://grafana.com/docs/grafana/latest/setup-grafana/installation/docker/
  # # https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/
  # # https://github.com/grafana/intro-to-mltp/blob/main/grafana/provisioning/datasources/datasources.yaml
  # #######################################################
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: unless-stopped
  #   environment:
  #     - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
  #     #      - GF_AUTH_ANONYMOUS_ENABLED=true
  #     #      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #     #      - GF_AUTH_DISABLE_LOGIN_FORM=true
  #   depends_on:
  #     - prometheus
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./../configs/grafana/provisioning:/etc/grafana/provisioning
  #     - ./../configs/grafana/dashboards:/var/lib/grafana/dashboards
  #     ## https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/
  #     # - ./../configs/grafana/grafana.ini:/etc/grafana/grafana.ini
  #   networks:
  #     - infrastructure
  # #######################################################
  # # tempo
  # # https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/docker-compose.yaml
  # # https://github.com/grafana/tempo/blob/main/example/docker-compose/shared
  # # https://github.com/grafana/tempo/blob/main/example/docker-compose/local
  # # https://github.com/grafana/tempo/tree/main/example/docker-compose
  # #######################################################
  # tempo:
  #   image: grafana/tempo:latest
  #   container_name: tempo
  #   restart: unless-stopped
  #   command: [ "-config.file=/etc/tempo.yaml" ]
  #   volumes:
  #     - ./../configs/tempo.yaml:/etc/tempo.yaml
  #   ports:
  #     - "3200" # tempo
  #     - "24317:4317" # otlp grpc
  #     - "24318:4318" # otlp http
  #   networks:
  #     - infrastructure
  # #######################################################
  # # loki
  # # https://grafana.com/docs/opentelemetry/collector/send-logs-to-loki/
  # # https://github.com/grafana/loki/blob/main/production/docker-compose.yaml
  # # https://github.com/grafana/loki/blob/main/examples/getting-started/docker-compose.yaml
  # #######################################################
  # loki:
  #   image: grafana/loki:latest
  #   hostname: loki
  #   container_name: loki
  #   ports:
  #     - "3100:3100"
  #   command: -config.file=/etc/loki/local-config.yaml
  #   volumes:
  #     - ./../configs/loki-config.yaml:/etc/loki/local-config.yaml
  #   networks:
  #     - infrastructure

  # #######################################################
  # # elasticsearch
  # # https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docker.html#docker-compose-file
  # #######################################################
  # elasticsearch:
  #   container_name: elasticsearch
  #   restart: unless-stopped
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
  #   environment:
  #     - discovery.type=single-node
  #     - cluster.name=docker-cluster
  #     - node.name=docker-node
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - xpack.security.enabled=false
  #     - xpack.security.http.ssl.enabled=false
  #     - xpack.security.transport.ssl.enabled=false
  #     - network.host=0.0.0.0
  #     - http.port=9200
  #     - transport.host=localhost
  #     - bootstrap.memory_lock=true
  #     - cluster.routing.allocation.disk.threshold_enabled=false
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - elastic-data:/usr/share/elasticsearch/data
  #   ports:
  #     - ${ELASTIC_HOST_PORT:-9200}:${ELASTIC_PORT:-9200}
  #     - 9300:9300
  #   networks:
  #     - infrastructure
  # #######################################################
  # # kibana
  # # https://www.elastic.co/guide/en/kibana/current/docker.html
  # #######################################################
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.17.0
  #   container_name: kibana
  #   restart: unless-stopped
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   ports:
  #     - ${KIBANA_HOST_PORT:-5601}:${KIBANA_PORT:-5601}
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - infrastructure
  # #######################################################
  # #  Redis
  # # https://developer.redis.com/howtos/quick-start
  # #######################################################
  # redis:
  #   image: redis/redis-stack:latest
  #   container_name: redis
  #   restart: unless-stopped
  #   networks:
  #     - infrastructure
  #   ports:
  #     - 6379:6379

  # #######################################################
  # # Keycloak
  # # https://www.keycloak.org/server/configuration
  # # https://www.keycloak.org/getting-started/getting-started-docker
  # # https://www.keycloak.org/server/containers
  # # https://www.keycloak.org/server/all-config#category-metrics
  # # https://www.keycloak.org/server/all-config#category-tracing
  # # https://www.keycloak.org/server/db
  # # https://www.keycloak.org/server/importExport
  # # https://www.keycloak.org/securing-apps/oidc-layers
  # # http://localhost:8080/realms/food-delivery-microservices/.well-known/openid-configuration
  # # https://www.keycloak.org/documentation
  # # https://www.keycloak.org/docs/latest/securing_apps/
  # # https://www.keycloak.org/docs/latest/server_admin/index.html
  # # https://auth0.com/docs/get-started/authentication-and-authorization-flow/resource-owner-password-flow/call-your-api-using-resource-owner-password-flow
  # # https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow/call-your-api-using-the-client-credentials-flow
  # # https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/
  # # https://curity.io/resources/learn/client-credentials/
  # # https://www.oauth.com/oauth2-servers/access-tokens/password-grant/
  # # https://curity.io/resources/learn/ropc/
  # # https://curity.io/resources/learn/implicit-flow/
  # # https://curity.io/resources/learn/oauth-implicit-flow/
  # # https://developer.okta.com/blog/2018/05/24/what-is-the-oauth2-implicit-grant-type
  # ####### realm config
  # # https://www.keycloak.org/docs/latest/authorization_services/
  # # https://stackoverflow.com/questions/42186537/resources-scopes-permissions-and-policies-in-keycloak
  # # https://www.keycloak.org/docs-api/latest/rest-api/index.html#RealmRepresentation
  # # https://www.keycloak.org/docs-api/latest/rest-api/index.html#ClientScopeRepresentation
  # # https://www.keycloak.org/docs-api/latest/rest-api/index.html#ClientRepresentation
  # # https://www.keycloak.org/docs-api/latest/rest-api/index.html#UserRepresentation
  # #######################################################
  # # use in-memory database (H2)
  # keycloak-dev-inmemory:
  #   image: quay.io/keycloak/keycloak:latest
  #   container_name: keycloak
  #   restart: unless-stopped
  #   networks:
  #     - infrastructure
  #   ports:
  #     - "8080:8080"
  #   #    command: start --import-realm  ## for production
  #   command: start-dev --import-realm
  #   environment:
  #     - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME:-admin}
  #     - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD:-admin}
  #     - KC_LOG=console
  #     - KC_HTTP_PORT=${KC_HTTP_PORT:-8080}
  #     - KC_HTTP_ENABLED=true
  #     - KC_HTTP_MANAGEMENT_PORT=${KC_HTTP_MANAGEMENT_PORT:-9000}
  #     - KC_LOG_CONSOLE_LEVEL=info
  #     - KC_LOG_CONSOLE_COLOR=true
  #     - KC_DB=dev-mem
  #     - KC_HOSTNAME=localhost
  #     - KC_FILE=/opt/keycloak/data/import/food-delivery-microservices-realm.json
  #     - KC_TRACING_ENABLED=true  # Enable tracing
  #     - KC_TRACING_SAMPLER=always  # Sample all traces
  #     - KC_TRACING_PROTOCOL=grpc
  #     - KC_TRACING_ENDPOINT=http://otel-collector:4317  # OTel Collector OTLP endpoint
  #     - KC_TRACING_SERVICE_NAME=keycloak
  #     - KC_METRICS_ENABLED=true  # Enable metrics
  #     - KC_METRICS_HISTOGRAMS_ENABLED=true  # Enable histogram metrics
  #     - APP_ADMIN_PASSWORD=${APP_ADMIN_PASSWORD}
  #     - USER_PASSWORD=${USER_PASSWORD}
  #     - TEST_RESOURCE_OWNER_CLIENT_SECRET=${TEST_RESOURCE_OWNER_CLIENT_SECRET}
  #     - TEST_CLIENT_CREDENTIALS_SECRET=${TEST_CLIENT_CREDENTIALS_SECRET}
  #     - APP_CLIENT_CREDENTIALS_SECRET=${APP_CLIENT_CREDENTIALS_SECRET}
  #     - API_GATEWAY_CLIENT_SECRET=${API_GATEWAY_CLIENT_SECRET}
  #     - USERS_MICROSERVICE_CLIENT_SECRET=${USERS_MICROSERVICE_CLIENT_SECRET}
  #     - CUSTOMERS_MICROSERVICE_CLIENT_SECRET=${CUSTOMERS_MICROSERVICE_CLIENT_SECRET}
  #     - CATALOGS_MICROSERVICE_CLIENT_SECRET=${CATALOGS_MICROSERVICE_CLIENT_SECRET}
  #     - ORDERS_MICROSERVICE_CLIENT_SECRET=${ORDERS_MICROSERVICE_CLIENT_SECRET}
  #     - API_GATEWAY_CLIENT_SECRET=${API_GATEWAY_CLIENT_SECRET}
  #     #     - KC_DB=postgres
  #     #     - KC_DB_URL=jdbc:postgresql://postgres:5432/identity_service
  #     #     - KC_DB_USERNAME=${KC_DB_USERNAME:-admin}
  #     #     - KC_DB_PASSWORD=${KC_DB_PASSWORD:-admin}
  #   volumes:
  #     - ./../configs/food-delivery-microservices-realm.json:/opt/keycloak/data/import/food-delivery-microservices-realm.json  # Mount the realm file
  #   depends_on:
  #     - postgres

networks:
  infrastructure:
    name: infrastructure
    driver: bridge

volumes:
  elastic-data:
