// <auto-generated />
using System;
using FoodDelivery.Services.Catalogs.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodDelivery.Services.Catalogs.Shared.Data.Migrations.Catalogs
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20250316140208_InitialCatalogMigration")]
    partial class InitialCatalogMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Brands.Brand", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_brands_id");

                    b.ToTable("brands", "catalog");
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Categories.Category", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_id");

                    b.ToTable("categories", "catalog");
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Categories.CategoryImage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.HasKey("Id")
                        .HasName("pk_category_image");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasDatabaseName("ix_category_image_category_id");

                    b.ToTable("category_image", (string)null);
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Products.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("brand_id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasDefaultValue("Black")
                        .HasColumnName("color");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ProductStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasDefaultValue("Available")
                        .HasColumnName("product_status");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasDefaultValue("Food")
                        .HasColumnName("product_type");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_products_brand_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_products_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_products_supplier_id");

                    b.ToTable("products", "catalog");
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Products.Models.ProductImage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_product_images");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_product_images_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_images_product_id");

                    b.ToTable("product_images", "catalog");
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Products.Models.ProductView", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ProductId"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("brand_id");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brand_name");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supplier_name");

                    b.HasKey("ProductId")
                        .HasName("pk_product_views");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_product_views_product_id");

                    b.ToTable("product_views", "catalog");
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Suppliers.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_suppliers");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_suppliers_id");

                    b.ToTable("suppliers", "catalog");
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Brands.Brand", b =>
                {
                    b.OwnsOne("FoodDelivery.Services.Catalogs.Brands.ValueObjects.BrandName", "Name", b1 =>
                        {
                            b1.Property<long>("BrandId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("BrandId");

                            b1.ToTable("brands", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("BrandId")
                                .HasConstraintName("fk_brands_brands_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Categories.Category", b =>
                {
                    b.OwnsOne("FoodDelivery.Services.Catalogs.Categories.ValueObjects.CategoryCode", "Code", b1 =>
                        {
                            b1.Property<long>("CategoryId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("code");

                            b1.HasKey("CategoryId");

                            b1.ToTable("categories", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId")
                                .HasConstraintName("fk_categories_categories_id");
                        });

                    b.OwnsOne("FoodDelivery.Services.Catalogs.Categories.ValueObjects.CategoryName", "Name", b1 =>
                        {
                            b1.Property<long>("CategoryId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("CategoryId");

                            b1.ToTable("categories", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId")
                                .HasConstraintName("fk_categories_categories_id");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Categories.CategoryImage", b =>
                {
                    b.HasOne("FoodDelivery.Services.Catalogs.Categories.Category", "Category")
                        .WithOne("Image")
                        .HasForeignKey("FoodDelivery.Services.Catalogs.Categories.CategoryImage", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_image_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Products.Models.Product", b =>
                {
                    b.HasOne("FoodDelivery.Services.Catalogs.Brands.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_brands_brand_id");

                    b.HasOne("FoodDelivery.Services.Catalogs.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");

                    b.HasOne("FoodDelivery.Services.Catalogs.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_suppliers_supplier_id");

                    b.OwnsOne("FoodDelivery.Services.Catalogs.Products.ValueObjects.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int>("Depth")
                                .HasColumnType("integer")
                                .HasColumnName("dimensions_depth");

                            b1.Property<int>("Height")
                                .HasColumnType("integer")
                                .HasColumnName("dimensions_height");

                            b1.Property<int>("Width")
                                .HasColumnType("integer")
                                .HasColumnName("dimensions_width");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("FoodDelivery.Services.Catalogs.Products.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("FoodDelivery.Services.Catalogs.Products.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("price");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("FoodDelivery.Services.Catalogs.Products.ValueObjects.ProductInformation", "ProductInformation", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("product_information_content");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("product_information_title");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("FoodDelivery.Services.Catalogs.Products.ValueObjects.Size", "Size", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("size");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("FoodDelivery.Services.Catalogs.Products.ValueObjects.Stock", "Stock", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int>("Available")
                                .HasColumnType("integer")
                                .HasColumnName("stock_available");

                            b1.Property<int>("MaxStockThreshold")
                                .HasColumnType("integer")
                                .HasColumnName("stock_max_stock_threshold");

                            b1.Property<int>("RestockThreshold")
                                .HasColumnType("integer")
                                .HasColumnName("stock_restock_threshold");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Dimensions")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("ProductInformation")
                        .IsRequired();

                    b.Navigation("Size")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Products.Models.ProductImage", b =>
                {
                    b.HasOne("FoodDelivery.Services.Catalogs.Products.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_images_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Categories.Category", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Services.Catalogs.Products.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
