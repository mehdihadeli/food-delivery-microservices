@using FoodDelivery.BlazorWebApp.Contracts
@using FoodDelivery.BlazorWebApp.Dtos
@inject ICatalogsServiceClient CatalogsServiceClient

<EditForm Model="product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h4>Add New Product</h4>
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <div class="mb-3">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="product.Name" />
    </div>
    <div class="mb-3">
        <label>Price</label>
        <InputNumber class="form-control" @bind-Value="product.Price" />
    </div>
    <div class="mb-3">
        <label>Stock</label>
        <InputNumber class="form-control" @bind-Value="product.Stock" />
    </div>
    <div class="mb-3">
        <label>Description</label>
        <InputTextArea class="form-control" @bind-Value="product.Description" />
    </div>
    <div class="mt-3">
        <button class="btn btn-success" disabled="@(isSaving)">Save</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="OnCancelClicked">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private CreateProductRequest product = new();
    private bool isSaving = false;
    private string? errorMessage = null;

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        errorMessage = null;
        try
        {
            // Replace with your service for creating a product
            await CatalogsServiceClient.CreateProductAsync(product);
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        isSaving = false;
    }

    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();
    }
}